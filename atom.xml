<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[PHP Extension Book]]></title>
    <link href="https://c9s.github.io/extbook/atom.xml" rel="self"/>
    <link href="https://c9s.github.io/extbook/"/>
    <updated>2015-09-15T17:02:32+08:00</updated>
    <id>https://c9s.github.io/extbook/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Defining ARG_INFO]]></title>
            <link href="https://c9s.github.io/extbook/_posts/args-info.md"/>
            <updated>2015-09-15T17:02:32+08:00</updated>
            <id>https://c9s.github.io/extbook/_posts/args-info.md</id>
            <content type="html"><![CDATA[<p>The code below presents: <code>($environment, $response)</code></p>

<pre><code class="c">// ZEND_BEGIN_ARG_INFO_EX(name, _unused, return_reference, required_num_args)
ZEND_BEGIN_ARG_INFO_EX(arginfo_middleware_call, 0, 0, 2)
    ZEND_ARG_INFO(0, environment)
    ZEND_ARG_INFO(0, response)
ZEND_END_ARG_INFO()
</code></pre>

<p>The code below presents: <code>(array &amp; $environment, array $response)</code></p>

<pre><code class="c">ZEND_BEGIN_ARG_INFO_EX(arginfo_middleware_call, 0, 0, 2)
    // ZEND_ARG_ARRAY_INFO(pass_by_ref, name, allow_null)
    ZEND_ARG_ARRAY_INFO(1, environment, 0)
    ZEND_ARG_ARRAY_INFO(0, response, 0)
ZEND_END_ARG_INFO()
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[call_user_function_ex]]></title>
            <link href="https://c9s.github.io/extbook/_posts/call-user-function.md"/>
            <updated>2015-09-15T17:02:32+08:00</updated>
            <id>https://c9s.github.io/extbook/_posts/call-user-function.md</id>
            <content type="html"><![CDATA[<pre><code class="c">    zval *retval_ptr;
    zval ***args;
    int status;
    zval *option_array;

    if (!option_array || !zend_is_callable(option_array, IS_CALLABLE_CHECK_NO_ACCESS, NULL TSRMLS_CC)) {
        php_error_docref(NULL TSRMLS_CC, E_WARNING, "First argument is expected to be a valid callback");
        zval_dtor(value);
        Z_TYPE_P(value) = IS_NULL;
        return;
    }

    args = safe_emalloc(sizeof(zval **), 1, 0);
    args[0] = &amp;value;

    // function table, object ptr, option_array = callback, n_params, params
    status = call_user_function_ex(EG(function_table), NULL, option_array, &amp;retval_ptr, 1, args, 0, NULL TSRMLS_CC);

    if (status == SUCCESS &amp;&amp; retval_ptr != NULL) {
        if (retval_ptr != value) {
            zval_dtor(value);
            COPY_PZVAL_TO_ZVAL(*value, retval_ptr);
        } else {
            zval_ptr_dtor(&amp;retval_ptr);
        }
    } else {
        zval_dtor(value);
        Z_TYPE_P(value) = IS_NULL;
    }

    efree(args);
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Extension Skeleton]]></title>
            <link href="https://c9s.github.io/extbook/_posts/extension-skeleton.md"/>
            <updated>2015-09-15T17:02:32+08:00</updated>
            <id>https://c9s.github.io/extbook/_posts/extension-skeleton.md</id>
            <content type="html"><![CDATA[<p>To create an extension, you will need at least three files:</p>

<ul>
<li><code>config.m4</code></li>
<li><code>ext_foo.c</code></li>
<li><code>ext_foo.h</code></li>
</ul>

<p>Here is a initial content of <code>config.m4</code>:</p>

<pre><code class="m4">PHP_ARG_ENABLE(foo, whether to enable foo extension support,
  [--enable-foo Enable foo extension support])
PHP_NEW_EXTENSION(foo, php_foo.c, $ext_shared)
</code></pre>

<p>here is the content of <code>php_foo.h</code>:</p>

<pre><code class="c">#ifndef _PHP_FOO_H
#define _PHP_FOO_H
#ifdef HAVE_CONFIG_H
    #include "config.h"
#endif

#ifdef ZTS
    #warning php_ext_uv module will *NEVER* be thread-safe
    #include &lt;TSRM.h&gt;
#endif

#include &lt;php.h&gt;

extern zend_module_entry foo_module_entry;

PHP_FUNCTION(foo_hello);

#endif
</code></pre>

<p>Here is the content of <code>php_foo.c</code>, a minimal extension source code must contains a <code>zend_module_entry</code>,
And you usually need to define <code>zend_function_entry</code> to declare your extension functions:</p>

<pre><code class="c">#include "php_foo.h"

PHP_MINIT_FUNCTION(foo);
PHP_MSHUTDOWN_FUNCTION(foo);
PHP_MINFO_FUNCTION(foo);

#if COMPILE_DL_FOO
ZEND_GET_MODULE(foo)
#endif

static const zend_function_entry foo_functions[] = {
    PHP_FE(foo_hello, NULL)
    PHP_FE_END
};

zend_module_entry foo_module_entry = {
#if ZEND_MODULE_API_NO &gt;= 20010901
    STANDARD_MODULE_HEADER,
#endif
    "Foo",
    foo_functions, // where you define your functions
    PHP_MINIT(foo),
    PHP_MSHUTDOWN(foo),
    NULL, // PHP_RINIT(foo)
    NULL, // PHP_RSHUTDOWN(foo)
    PHP_MINFO(foo),
#if ZEND_MODULE_API_NO &gt;= 20010901
    "0.1",
#endif
    STANDARD_MODULE_PROPERTIES
};

PHP_MINIT_FUNCTION(foo) {
    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(foo) {
    return SUCCESS;
}

PHP_MINFO_FUNCTION(foo) {
}

PHP_FUNCTION(foo_hello) {
    RETURN_TRUE;
}

</code></pre>

<p>Compile it!</p>

<pre><code class="sh">phpize
./configure
make
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Extension Skeleton]]></title>
            <link href="https://c9s.github.io/extbook/_posts/invalid-library.md"/>
            <updated>2015-09-15T17:02:32+08:00</updated>
            <id>https://c9s.github.io/extbook/_posts/invalid-library.md</id>
            <content type="html"><![CDATA[<p>If you encountered this error while running <code>make test</code> or loading extension:</p>

<pre><code>PHP Warning:  PHP Startup: Invalid library (maybe not a PHP library) 'phpsgi.so' in Unknown on line 0
</code></pre>

<p>Be sure to check you defined this:</p>

<pre><code class="c">#if COMPILE_DL_FOO
ZEND_GET_MODULE(foo)
#endif
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Parse Callable Parameter]]></title>
            <link href="https://c9s.github.io/extbook/_posts/parse-callable-parameter.md"/>
            <updated>2015-09-15T17:02:32+08:00</updated>
            <id>https://c9s.github.io/extbook/_posts/parse-callable-parameter.md</id>
            <content type="html"><![CDATA[<p>The code below is from php-src (<code>ext/standard/basic_functions.c</code>)</p>

<pre><code class="c">    zval *retval_ptr = NULL;
    zend_fcall_info fci;
    zend_fcall_info_cache fci_cache;

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f*", &amp;fci, &amp;fci_cache, &amp;fci.params, &amp;fci.param_count) == FAILURE) {
        return;
    }

    fci.retval_ptr_ptr = &amp;retval_ptr;

    if (zend_call_function(&amp;fci, &amp;fci_cache TSRMLS_CC) == SUCCESS &amp;&amp; fci.retval_ptr_ptr &amp;&amp; *fci.retval_ptr_ptr) {
        COPY_PZVAL_TO_ZVAL(*return_value, *fci.retval_ptr_ptr);
    }

    if (fci.params) {
        efree(fci.params);
    }
</code></pre>
]]></content>
        </entry>
    </feed>